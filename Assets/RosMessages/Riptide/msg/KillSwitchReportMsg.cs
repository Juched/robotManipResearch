//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Riptide
{
    [Serializable]
    public class KillSwitchReportMsg : Message
    {
        public const string k_RosMessageName = "riptide_msgs2/KillSwitchReport";
        public override string RosMessageName => k_RosMessageName;

        //  ========================================
        //  Constants
        //  ========================================
        //  The number of kill switches defined below
        public const byte NUM_KILL_SWITCHES = 4;
        //  ========================================
        //  Kill Switch IDs
        //  ========================================
        //  Note: Do not publish as physical kill switch
        public const byte KILL_SWITCH_PHYSICAL = 0;
        //  RQT Kill switch is for use in the controllers rqt plugin
        public const byte KILL_SWITCH_RQT_CONTROLLER = 1;
        //  The kill switch from the physical topside kill switch button
        public const byte KILL_SWITCH_TOPSIDE_BUTTON = 2;
        //  Debug kill switch should be used when publishing from command line or rqt manual publishing
        //  It is not recommended, but to avoid confusion this is implemented to allow manual publishing without conflicting
        public const byte KILL_SWITCH_DEBUG = 3;
        //  ========================================
        //  Message Definition
        //  ========================================
        //  Note: The header must be filled out properly!
        //  If the time is not present, then the message will be rejected
        //  The frame id should uniquely identify the code running. This prevents from accidental re-enabling
        //  on kill from another node publishing as the same switch ID 
        public Std.HeaderMsg header;
        //  A switch ID defined above
        public byte kill_switch_id;
        //  If the switch is in a kill state, stopping all active operations
        public bool switch_asserting_kill;
        //  If the switch needs to periodically update in order to keep out of kill state
        public bool switch_needs_update;

        public KillSwitchReportMsg()
        {
            this.header = new Std.HeaderMsg();
            this.kill_switch_id = 0;
            this.switch_asserting_kill = false;
            this.switch_needs_update = false;
        }

        public KillSwitchReportMsg(Std.HeaderMsg header, byte kill_switch_id, bool switch_asserting_kill, bool switch_needs_update)
        {
            this.header = header;
            this.kill_switch_id = kill_switch_id;
            this.switch_asserting_kill = switch_asserting_kill;
            this.switch_needs_update = switch_needs_update;
        }

        public static KillSwitchReportMsg Deserialize(MessageDeserializer deserializer) => new KillSwitchReportMsg(deserializer);

        private KillSwitchReportMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.kill_switch_id);
            deserializer.Read(out this.switch_asserting_kill);
            deserializer.Read(out this.switch_needs_update);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.kill_switch_id);
            serializer.Write(this.switch_asserting_kill);
            serializer.Write(this.switch_needs_update);
        }

        public override string ToString()
        {
            return "KillSwitchReportMsg: " +
            "\nheader: " + header.ToString() +
            "\nkill_switch_id: " + kill_switch_id.ToString() +
            "\nswitch_asserting_kill: " + switch_asserting_kill.ToString() +
            "\nswitch_needs_update: " + switch_needs_update.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
