//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Riptide
{
    [Serializable]
    public class ConstantsMsg : Message
    {
        public const string k_RosMessageName = "riptide_msgs2/Constants";
        public override string RosMessageName => k_RosMessageName;

        //  Colors Codes
        public const byte COLOR_BLACK = 0;
        public const byte COLOR_RED = 1;
        //  Orientation Code
        public const byte LEFT = 0;
        public const byte RIGHT = 1;
        //  Safety Measure Codes
        public const byte SAFETY_BAT_VOLT_LOW = 0;
        public const byte SAFETY_BAT_CUR_SPIKE = 1;
        public const byte SAFETY_CVTR_VOLT_LOW = 2;
        public const byte SAFETY_CVTR_CUR_SPIKE = 3;
        //  Status Codes
        public const byte STATUS_INIT = 0;
        public const byte STATUS_ACTIVATED = 1;
        public const byte STATUS_DEACTIVATED = 2;
        public const byte STATUS_MISSION_ATTEMPTED = 3;
        public const byte STATUS_MISSION_NOT_ATTEMPTED = 4;
        public const byte STATUS_SAFE = 5;
        public const byte STATUS_EMERGENCY = 6;
        //  Alignment plane
        public const byte PLANE_YZ = 0;
        public const byte PLANE_XY = 1;
        //  Controls
        public const byte CONTROL_BBOX_WIDTH = 0;
        public const byte CONTROL_BBOX_HEIGHT = 1;
        //  Quadrants
        public const byte QUAD_A = 0;
        public const byte QUAD_B = 1;
        public const byte QUAD_C = 2;
        public const byte QUAD_D = 3;
        //  Mission IDs
        public const byte MISSION_A_BLACK = 0;
        public const byte MISSION_B_BLACK = 1;
        public const byte MISSION_C_BLACK = 2;
        public const byte MISSION_D_BLACK = 3;
        public const byte MISSION_TEST = 4;
        public const byte MISSION_NONE = 255;
        //  Competition Round IDs
        public const byte COMPETITION_SEMIS = 0; //  Practice and semis are the same
        public const byte COMPETITION_FINALS = 1;
        //  Task and Task Map file paths
        public const string FILE_TASKS = "../osu-uwrt/riptide_software/src/riptide_autonomy/cfg/tasks.yaml";
        public const string FILE_TASKS_SIM = "../osu-uwrt/riptide_software/src/riptide_vision/cfg/tasks_sim.yaml";
        public const string FILE_MAP_SEMIS = "../osu-uwrt/riptide_software/src/riptide_autonomy/cfg/task_map_semis.yaml";
        public const string FILE_MAP_FINALS = "../osu-uwrt/riptide_software/src/riptide_autonomy/cfg/task_map_finals.yaml";
        //  Execute Codes
        public const byte EXECUTE_STANDBY = 0;
        public const byte EXECUTE_TSLAM = 1;
        public const byte EXECUTE_MISSION = 2;
        //  Competition Task IDs
        public const byte TASK_CASINO_GATE = 0;
        public const byte TASK_PATH_MARKER1 = 1;
        public const byte TASK_DICE = 2;
        public const byte TASK_PATH_MARKER2 = 3;
        public const byte TASK_SLOTS = 4;
        public const byte TASK_BUY_GOLD_CHIP1 = 5;
        public const byte TASK_ROULETTE = 6;
        public const byte TASK_BUY_GOLD_CHIP2 = 7;
        public const byte TASK_CASH_IN = 8;
        public const byte TASK_DICE_HOP = 9;

        public ConstantsMsg()
        {
        }
        public static ConstantsMsg Deserialize(MessageDeserializer deserializer) => new ConstantsMsg(deserializer);

        private ConstantsMsg(MessageDeserializer deserializer)
        {
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
        }

        public override string ToString()
        {
            return "ConstantsMsg: ";
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
