//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Riptide
{
    [Serializable]
    public class FirmwareStateMsg : Message
    {
        public const string k_RosMessageName = "riptide_msgs2/FirmwareState";
        public override string RosMessageName => k_RosMessageName;

        public Std.HeaderMsg header;
        public bool depth_sensor_initialized;
        public bool actuator_connected;
        public uint actuator_faults;
        public sbyte peltier_cooling_threshold;
        public uint copro_faults;
        public byte copro_memory_usage;
        public uint kill_switches_enabled;
        public uint kill_switches_asserting_kill;
        public uint kill_switches_needs_update;
        public uint kill_switches_timed_out;

        public FirmwareStateMsg()
        {
            this.header = new Std.HeaderMsg();
            this.depth_sensor_initialized = false;
            this.actuator_connected = false;
            this.actuator_faults = 0;
            this.peltier_cooling_threshold = 0;
            this.copro_faults = 0;
            this.copro_memory_usage = 0;
            this.kill_switches_enabled = 0;
            this.kill_switches_asserting_kill = 0;
            this.kill_switches_needs_update = 0;
            this.kill_switches_timed_out = 0;
        }

        public FirmwareStateMsg(Std.HeaderMsg header, bool depth_sensor_initialized, bool actuator_connected, uint actuator_faults, sbyte peltier_cooling_threshold, uint copro_faults, byte copro_memory_usage, uint kill_switches_enabled, uint kill_switches_asserting_kill, uint kill_switches_needs_update, uint kill_switches_timed_out)
        {
            this.header = header;
            this.depth_sensor_initialized = depth_sensor_initialized;
            this.actuator_connected = actuator_connected;
            this.actuator_faults = actuator_faults;
            this.peltier_cooling_threshold = peltier_cooling_threshold;
            this.copro_faults = copro_faults;
            this.copro_memory_usage = copro_memory_usage;
            this.kill_switches_enabled = kill_switches_enabled;
            this.kill_switches_asserting_kill = kill_switches_asserting_kill;
            this.kill_switches_needs_update = kill_switches_needs_update;
            this.kill_switches_timed_out = kill_switches_timed_out;
        }

        public static FirmwareStateMsg Deserialize(MessageDeserializer deserializer) => new FirmwareStateMsg(deserializer);

        private FirmwareStateMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.depth_sensor_initialized);
            deserializer.Read(out this.actuator_connected);
            deserializer.Read(out this.actuator_faults);
            deserializer.Read(out this.peltier_cooling_threshold);
            deserializer.Read(out this.copro_faults);
            deserializer.Read(out this.copro_memory_usage);
            deserializer.Read(out this.kill_switches_enabled);
            deserializer.Read(out this.kill_switches_asserting_kill);
            deserializer.Read(out this.kill_switches_needs_update);
            deserializer.Read(out this.kill_switches_timed_out);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.depth_sensor_initialized);
            serializer.Write(this.actuator_connected);
            serializer.Write(this.actuator_faults);
            serializer.Write(this.peltier_cooling_threshold);
            serializer.Write(this.copro_faults);
            serializer.Write(this.copro_memory_usage);
            serializer.Write(this.kill_switches_enabled);
            serializer.Write(this.kill_switches_asserting_kill);
            serializer.Write(this.kill_switches_needs_update);
            serializer.Write(this.kill_switches_timed_out);
        }

        public override string ToString()
        {
            return "FirmwareStateMsg: " +
            "\nheader: " + header.ToString() +
            "\ndepth_sensor_initialized: " + depth_sensor_initialized.ToString() +
            "\nactuator_connected: " + actuator_connected.ToString() +
            "\nactuator_faults: " + actuator_faults.ToString() +
            "\npeltier_cooling_threshold: " + peltier_cooling_threshold.ToString() +
            "\ncopro_faults: " + copro_faults.ToString() +
            "\ncopro_memory_usage: " + copro_memory_usage.ToString() +
            "\nkill_switches_enabled: " + kill_switches_enabled.ToString() +
            "\nkill_switches_asserting_kill: " + kill_switches_asserting_kill.ToString() +
            "\nkill_switches_needs_update: " + kill_switches_needs_update.ToString() +
            "\nkill_switches_timed_out: " + kill_switches_timed_out.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
